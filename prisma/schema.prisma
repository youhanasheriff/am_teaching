generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  image         String?
  passwordHash  String?
  role          String   @default("student")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  payments      Payment[]
}

model Booking {
  id              String   @id @default(cuid())
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?
  lessonType      String   // "general" | "ielts"
  durationMin     Int
  provider        String   // "cal" | "calendly"
  providerEventId String?
  meetLink        String?
  start           DateTime?
  end             DateTime?
  createdAt       DateTime @default(now())
}

model Payment {
  id             String   @id @default(cuid())
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?
  amount         Int
  currency       String   @default("usd")
  stripeSessionId String  @unique
  status         String
  lessonType     String?
  durationMin    Int?
  createdAt      DateTime @default(now())
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
